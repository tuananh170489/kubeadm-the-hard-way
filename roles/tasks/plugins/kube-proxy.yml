- name: Create kube-proxy service account
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        creationTimestamp: null
        name: kube-proxy
        namespace: kube-system

- name: Create kube-proxy ClusterRoleBinding
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        creationTimestamp: null
        name: system:kube-proxy
      subjects:
        - kind: ServiceAccount
          name: kube-proxy
          namespace: kube-system
      roleRef:
        kind: ClusterRole
        name: system:node-proxier
        apiGroup: rbac.authorization.k8s.io

- name: Create kube-proxy configmap
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        creationTimestamp: null
        name: kube-proxy
        namespace: kube-system
        labels:
          k8s-app: kube-proxy
      data:
        config.yaml: |
          apiVersion: kubeproxy.config.k8s.io/v1alpha1
          bindAddress: 0.0.0.0
          bindAddressHardFail: false
          clientConnection:
            acceptContentTypes: ""
            burst: 0
            contentType: ""
            kubeconfig: /var/lib/kube-proxy/kubeconfig.conf
            qps: 0
          clusterCIDR: "{{ k8s_pod_cidr }}"
          configSyncPeriod: 0s
          conntrack:
            maxPerCore: null
            min: null
            tcpCloseWaitTimeout: null
            tcpEstablishedTimeout: null
          enableProfiling: false
          healthzBindAddress: ""
          hostnameOverride: ""
          iptables:
            masqueradeAll: false
            masqueradeBit: null
            minSyncPeriod: 0s
            syncPeriod: 0s
          ipvs:
            excludeCIDRs: null
            minSyncPeriod: 0s
            scheduler: ""
            strictARP: true
            syncPeriod: 0s
            tcpFinTimeout: 0s
            tcpTimeout: 0s
            udpTimeout: 0s
          kind: KubeProxyConfiguration
          metricsBindAddress: ""
          mode: "{{ k8s_proxy_mode }}"
          nodePortAddresses: null
          oomScoreAdj: null
          portRange: ""
          udpIdleTimeout: 0s
          winkernel:
            enableDSR: false
            networkName: ""
            sourceVip: ""
        kubeconfig: |
          {% set port = k8s_apis_port %}
          {% if port == "443" %}
          {% set server = "https://" + k8s_apis_url %}
          {% else %}
          {% set server = "https://" + k8s_apis_url + ":" + port %}
          {% endif %}
          apiVersion: v1
          kind: Config
          clusters:
          - name: {{ k8s_cluster_name }}
            cluster:
              certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              server: {{ server }}
          users:
          - name: kube-proxy
            user:
              tokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
          contexts:
          - context:
              cluster: {{ k8s_cluster_name }}
              user: kube-proxy
            name: kube-proxy
          current-context: kube-proxy

- name: Create kube-proxy daemonset
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    state: present
    definition:
      apiVersion: apps/v1
      kind: DaemonSet
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-proxy
        name: kube-proxy
        namespace: kube-system
      spec:
        updateStrategy:
          type: RollingUpdate
        selector:
          matchLabels:
            k8s-app: kube-proxy
        template:
          metadata:
            labels:
              k8s-app: kube-proxy
          spec:
            priorityClassName: system-node-critical
            serviceAccountName: kube-proxy
            containers:
            - name: kube-proxy
              image: k8s.gcr.io/kube-proxy:v{{ k8s_version }}
              imagePullPolicy: IfNotPresent
              command:
              - /usr/local/bin/kube-proxy
              - --config=/var/lib/kube-proxy/config.yaml
              - --hostname-override=$(NODE_NAME)
              - --v=2
              env:
              - name: NODE_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: spec.nodeName
              securityContext:
                privileged: true
              volumeMounts:
              - mountPath: /var/lib/kube-proxy
                name: kube-proxy
              - mountPath: /run/xtables.lock
                name: xtables-lock
              - mountPath: /lib/modules
                name: lib-modules
                readOnly: true
            hostNetwork: true
            nodeSelector:
              kubernetes.io/os: linux
            tolerations:
            - key: CriticalAddonsOnly
              operator: Exists
            - operator: Exists
            volumes:
            - configMap:
                name: kube-proxy
              name: kube-proxy
            - hostPath:
                path: /run/xtables.lock
                type: FileOrCreate
              name: xtables-lock
            - hostPath:
                path: /lib/modules
              name: lib-modules