- name: Create CoreDNS service account
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        creationTimestamp: null
        name: coredns
        namespace: kube-system

- name: Create CoreDNS ClusterRole
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        creationTimestamp: null
        labels:
          kubernetes.io/bootstrapping: rbac-defaults
        name: system:coredns
      rules:
      - apiGroups:
        - ""
        resources:
        - endpoints
        - services
        - pods
        - namespaces
        verbs:
        - list
        - watch
      - apiGroups:
        - ""
        resources:
        - nodes
        verbs:
        - get

- name: Create CoreDNS ClusterRoleBinding
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        creationTimestamp: null
        annotations:
          rbac.authorization.kubernetes.io/autoupdate: "true"
        labels:
          kubernetes.io/bootstrapping: rbac-defaults
        name: system:coredns
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: system:coredns
      subjects:
      - kind: ServiceAccount
        name: coredns
        namespace: kube-system

- name: Create CoreDNS configmap
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        creationTimestamp: null
        name: coredns
        namespace: kube-system
      data:
        Corefile: |
          . {
              log . "{remote} {type} {name} {class} {size} {rcode} {duration}"
              errors
              ready
              health {
                lameduck 5s
              }
              autopath @kubernetes
              kubernetes cluster.local in-addr.arpa ip6.arpa {
                pods verified
                fallthrough in-addr.arpa ip6.arpa
                ttl 30
              }
              hosts {
                210.245.97.121 admin.xinhxinh.live
                210.245.97.121 socket.xinhxinh.live
                210.245.97.121 xinhxinh.live
                10.10.61.2 xinhxinh-mongodb1
                10.10.61.3 xinhxinh-mongodb2
                10.10.61.4 xinhxinh-mongodb3
                fallthrough
              }
              prometheus :9153
              forward . 1.1.1.1 {
                max_concurrent 1000
                prefer_udp
              }
              cache 30
              loop
              reload
              loadbalance
          }
          service.prod.xinhxinh.live {
            forward . 10.10.60.4:8600 10.10.60.5:8600 10.10.60.6:8600 {
              prefer_udp
            }
            cache
            loadbalance
          }

- name: Create CoreDNS deployment
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        creationTimestamp: null
        name: coredns
        namespace: kube-system
        labels:
          k8s-app: kube-dns
          kubernetes.io/name: "CoreDNS"
      spec:
        replicas: 2
        strategy:
          type: RollingUpdate
          rollingUpdate:
            maxUnavailable: 1
        selector:
          matchLabels:
            k8s-app: kube-dns
        template:
          metadata:
            labels:
              k8s-app: kube-dns
          spec:
            priorityClassName: system-cluster-critical
            serviceAccountName: coredns
            tolerations:
            - key: "CriticalAddonsOnly"
              operator: "Exists"
            - effect: NoSchedule
              key: node-role.kubernetes.io/master
            nodeSelector:
              kubernetes.io/os: linux
            affinity:
              podAntiAffinity:
                preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 100
                  podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - key: k8s-app
                        operator: In
                        values:
                        - kube-dns
                    topologyKey: kubernetes.io/hostname        
            containers:
            - name: coredns
              image: coredns/coredns:{{ coredns_version }}
              imagePullPolicy: IfNotPresent
              resources:
                limits:
                  memory: 170Mi
                requests:
                  cpu: 100m
                  memory: 70Mi
              args:
              - "-conf"
              - "/etc/coredns/Corefile"
              volumeMounts:
              - name: config-volume
                mountPath: /etc/coredns
                readOnly: true
              ports:
              - containerPort: 53
                name: dns
                protocol: UDP
              - containerPort: 53
                name: dns-tcp
                protocol: TCP
              - containerPort: 9153
                name: metrics
                protocol: TCP
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  add:
                  - NET_BIND_SERVICE
                  drop:
                  - all
                readOnlyRootFilesystem: true
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 60
                timeoutSeconds: 5
                successThreshold: 1
                failureThreshold: 5
              readinessProbe:
                httpGet:
                  path: /ready
                  port: 8181
                  scheme: HTTP
            dnsPolicy: Default
            volumes:
              - name: config-volume
                configMap:
                  name: coredns
                  defaultMode: 420

- name: Create CoreDNS service
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        creationTimestamp: null
        name: kube-dns
        namespace: kube-system
        annotations:
          prometheus.io/port: "9153"
          prometheus.io/scrape: "true"
        labels:
          k8s-app: kube-dns
          kubernetes.io/cluster-service: "true"
          kubernetes.io/name: "CoreDNS"
      spec:
        selector:
          k8s-app: kube-dns
        clusterIP: "{{ k8s_service_cidr | ipaddr('10') | ipaddr('address') }}"
        ports:
        - name: dns
          port: 53
          protocol: UDP
        - name: dns-tcp
          port: 53
          protocol: TCP
        - name: metrics
          port: 9153
          protocol: TCP